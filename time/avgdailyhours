#!/usr/bin/env python

# show average hours billed for each day of the week
# avgdailyhours < path/to/harvest/entries_for_time_period.json

import argparse
import csv
from datetime import datetime
from itertools import groupby
import json
import sys
import yaml

def main():
    avg_daily_hours = {
        'start_date':None,
        'end_date':None,
        'hours_by_weekday':[]
    }

    parser = argparse.ArgumentParser(description="Show average billable hours by day of week.")
    parser.add_argument('-f', default='yaml', choices=['yaml', 'csv'], dest='format')
    args = vars(parser.parse_args())

    entries = json.loads(sys.stdin.read())
    entry_days = sorted(
        set(
            map(lambda entry: datetime.strptime(entry['day_entry']['spent_at'], '%Y-%m-%d'), entries)
        )
    )
    avg_daily_hours['start_date'] = entry_days[0].strftime('%Y-%m-%d')
    avg_daily_hours['end_date'] = entry_days[-1].strftime('%Y-%m-%d')

    hours_by_day = []
    for k, g in groupby(entries, key=lambda e: e['day_entry']['spent_at']):
        hours_by_day.append((
            k,
            (datetime.strptime(k, '%Y-%m-%d')).weekday(),
            reduce(lambda h1, h2: h1 + h2, map(lambda e: e['day_entry']['hours'], list(g)))
        ))

    hours_by_day = sorted(hours_by_day, key=lambda d: d[1])

    hours_by_weekday = []
    for k, g in groupby(hours_by_day, key=lambda d: d[1]):
        days = list(g)
        hours_by_weekday.append({
            'dayofweek':k,
            'average_hours':reduce(lambda h1, h2: h1 + h2, map(lambda e: e[2], days)) / len(days),
            'days_worked':len(days)
        })
    avg_daily_hours['hours_by_weekday'] = hours_by_weekday

    if args['format'] == 'csv':
         csvwriter = csv.DictWriter(sys.stdout, ['dayofweek', 'average_hours', 'days_worked'])
         csvwriter.writeheader()
         csvwriter.writerows(hours_by_weekday)
    else:
        sys.stdout.write(yaml.dump(avg_daily_hours, default_flow_style=False))

    return 0

if __name__ == '__main__':
    sys.exit(main())
